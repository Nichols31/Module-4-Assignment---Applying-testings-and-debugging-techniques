// This pseudocode segment is intended to compute and display
// the cost of home ownership for any number of users
// The program ends when a user enters 0 for the mortgage payment
start
   Declarations
      num mortgagePayment
      num utilities
      num taxes
      num upkeep
      num total
   startup()
   while mortgagePayment not equal to 0
      MainLoop()
   endwhile
   finishUp()
stop

startUp()
   output "Enter your mortgage payment or 0 to quit"
   input mtgPayment
return

mainLoop()
   output "Enter utilities"
   input utilities
   output "Enter taxes"
   input taxes
   output "Enter amount for upkeep"
   input upkeep
   total = mortgagePayment + utilities + taxes + upkeep
   output "Total is ", total
return

finishUp()
   output "End of program"
return

Structure: 
1. Start of Program: Marks the beginning of the program.

2. Declarations: Variables are declared here.

3. Startup Routine: Initial instructions and inputs.

4. Main Loop:Repeatedly performs calculations until the exit condition is met.

5. Finish Up Routine: Concludes the program.

6. End of Program: Marks the termination of the program.

Breakdown :


 
Declarations

`mortgagePayment`, `utilities`, `taxes`, `upkeep`, `total`: These are numeric variables (denoted by `num`) used to store various costs.


startup()
 Prompts the user to enter their mortgage payment or 0 to quit.

 Accepts input and stores it in `mtgPayment`.


Main Loop
 Continues as long as `mortgagePayment` is not equal to 0.

 In each iteration:

 Prompts the user to enter costs for utilities, taxes, and upkeep.

 Calculates the total cost (`total`) by summing `mortgagePayment`, `utilities`, `taxes`, and `upkeep`.

 Displays the total cost.


finishUp()
 Displays a message indicating the end of the program.


Points of Attention:

1. Variable Assignment: In `startup()`, the input is stored in `mtgPayment`, but the loop checks `mortgagePayment`. These should be the same variable.


2. Input Validation: The program assumes valid numeric input. Real-world implementations should handle invalid inputs.


3. User Guidance: Each step clearly prompts the user for specific inputs.


4. Termination Condition: The loop terminates when `mortgagePayment` is 0, effectively allowing multiple users to use the program sequentially.
